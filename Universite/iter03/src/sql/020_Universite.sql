/*
-- =========================================================================== A
Produit : CoFELI.Exemple.Universite/v2021
Composant : 020_Universite.sql
Responsable : Luc.LAVOIE@USherbrooke.ca
Version : 0.4.c (2021-03-12)
Statut : travail en cours
Encodage : UTF-8, sans BOM; fin de ligne simple (LF)
Plateformes : PostgreSQl v11+
-- =========================================================================== A
*/

/*
-- =========================================================================== B
== But

Illustrer la construction d‚Äôun sch√©ma relationnel simple selon les r√®gles de l‚Äôart.

== Probl√®me

Mod√©lisation des entit√©s utiles √† la gestion des inscriptions √©tudiantes universitaires.

== Conception

Voir
  * Universite_analyse.adoc
  * Universite_schema_rel_e03-types.txt

-- =========================================================================== B
*/

--
-- TYPES
--
create domain Bureau
  Text
  check (value similar to '[A-Z][0-9]{1,2}-[0-9]{4}(-[0-9]{2})?') ;
create domain Cause
  Text ;
create domain CDC
  SmallInt
  check (value between 1 and 90) ;
create domain MatriculeE
  Text
  check (value similar to '[a-z]{4}[0-9]{4}') ;
create domain MatriculeP
  Text
  check (value similar to '[a-z]{4}[0-9]{4}') ;
create domain NoGroupe
  Text
  check (value similar to '[0-9]{2}') ;
create domain Nom
  Text
  check (length(value) <= 120 and value similar to '[[:alpha:]]+([-‚Äô [:alpha:]])*[[:alpha:]]+') ;
create domain Note
  SmallInt
  check (value between 1 and 90) ;
create domain Sigle
  Text check (value similar to '[A-Z]{3}[0-9]{3}') ;
create domain Titre
  Text ;
create domain Trimestre
  Text
  check (value similar to '[0-9]{4}-[1-3]') ;

--
-- RELATIONS
--
create table Etudiant
(
  matriculeE MatriculeE not null,
  nom Nom not null,
  ddn Date not null,
  --  df matriculeE -> nom
  --  df matriculeE -> ddn
  constraint Etudiant_cc0 primary key (matriculeE)
) ;
comment on table Etudiant is
  'La personne √©tudiante identifi√©e par le matricule "matriculeE" poss√®de un dossier √† l‚ÄôUniversit√©. '
  'Son nom est "nom". '
  'Sa date de naissance est "ddn". '
;

create table Professeur
(
  matriculeP MatriculeP not null,
  nom Nom not null,
  --  df matriculeP -> nom
  constraint Professeur_cc0 primary key (matriculeP)
) ;
comment on table Professeur is
  'La personne enseignante identifi√©e par le matricule "matriculeP" poss√®des un dossier √† l‚ÄôUniversit√©. '
  'Une personne enseignante est une professeure, un professeur, une charg√©e de cours ou un charg√© de cours. '
  'Son nom est "nom". '
;

create table Professeur_Bureau_PRE
(
  matriculeP MatriculeP not null,
  bureau Bureau not null,
  --  df matriculeP -> bureau
  constraint Professeur_Bureau_PRE_cc0 primary key (matriculeP),
  constraint Professeur_Bureau_PRE_cr0 foreign key (matriculeP) references Professeur
);
comment on table Professeur_Bureau_PRE is
  'La personne enseignante identifi√©e par le matricule "matriculeP" a un bureau '
  'et ce bureau est le "bureau". '
;

create table Professeur_Bureau_ABS
(
  matriculeP MatriculeP not null,
  cause Cause not null,
  --  df matriculeP -> cause
  constraint Professeur_Bureau_ABS_cc0 primary key (matriculeP),
  constraint Professeur_Bureau_ABS_cr1 foreign key (matriculeP) references Professeur
) ;
comment on table Professeur_Bureau_ABS is
  'La personne enseignante identifi√©e par le matricule "matriculeP" n‚Äôa pas de bureau '
  'pour la raison "cause". '
;

/*
Cet invariant

  inv Professeur_Bureau_INV
    pred ¬´ Tout professeur a soit un bureau soit une raison (cause) pour laquelle il n‚Äôen a pas. ¬ª
    Professeur ùûπ {matriculeP} =
      (Professeur_Bureau_ABS ùûπ {matriculeP}) UnionD (Professeur_Bureau_PRE ùûπ {matriculeP})

devrait pouvoir √™tre traduit en SQL ISO comme suit, sachant que l‚Äô√©galit√© entre
relations n‚Äôest pas d√©finie en SQL (sic) :

  create assertion Professeur_Bureau_INV check
  (
  with
    PROF as (select matriculeP from Professeur),
    PRE as (select matriculeP from Professeur_Bureau_PRE),
    ABS as (select matriculeP from Professeur_Bureau_ABS)
  select
    not exists (select * from PRE natural join ABS)
    and
    (select count(*) from PROF) = (select count(*) from PRE) + (select count(*) from ABS)
  );
  comment on assertion Professeur_Bureau_INV is
    'Toute personne enseignante a soit un bureau soit une raison (cause) pour laquelle elle n‚Äôen a pas. '
  ;

En effet, gr√¢ce aux cl√©s candidates de Professeur_Bureau_PRE et Professeur_Bureau_ABS,
les deux relations PRE et ABS sont des sous-ensembles de PROF, il suffit donc de
tester que PRE et ABS sont disjoints et que

  #PROF = #PRE + #ABS

o√π # est l'op√©rateur de cardinalit√© (select count(*) from... en SQL).

Malheureusement, PostgreSQL (pas plus qu'Oracle, DB2 ou MS-SQL) ne permet le
CREATE ASSERTION. Il faut donc d√©finir l'automatisme et les d√©clencheurs comme
ci-apr√®s.

  create or replace function Professeur_Bureau_INV () returns boolean
    language sql as
  $$
  with
    PROF as (select matriculeP from Professeur),
    PRE as (select matriculeP from Professeur_Bureau_PRE),
    ABS as (select matriculeP from Professeur_Bureau_ABS)
  select
    not exists (select * from PRE natural join ABS)
    and
    (select count(*) from PROF) = (select count(*) from PRE) + (select count(*) from ABS)
  $$;
  comment on function Professeur_Bureau_INV () is
    'Toute personne enseignante a soit un bureau soit une raison (cause) pour laquelle elle n‚Äôen a pas. '
  ;

  create or replace function Professeur_Bureau_DECL()
    returns trigger
    language 'plpgsql'
  as
  $$
  begin
    if not Professeur_Bureau_INV() then
      raise exception
        'Professeur_Bureau_INV : '
        'Toute personne enseignante a soit un bureau soit une raison (cause) pour laquelle elle n‚Äôen a pas. ' ;
    end if;
    return new;
  end;
  $$;

  create constraint trigger Professeur_Bureau_PRE_AUTO
    after insert
       or delete
       or update of matriculeP
    on Professeur_Bureau_PRE
    from Professeur
    deferrable
    for each statement
    execute function Professeur_Bureau_DECL();

  create constraint trigger Professeur_bureau_ABS_AUTO
    after insert
       or delete
       or update of matriculeP
    on Professeur_Bureau_ABS
    from Professeur
    deferrable
    for each statement
    execute function Professeur_Bureau_DECL();

Malheureusement, ce n‚Äôest pas tout.
Il faut vraisemblablement suspendre les d√©clencheurs durant les transactions
traitant des lots de modifications afin de ne pas engendrer des cascades d‚Äôautomatismes.
La v√©rification n‚Äôaura donc lieu qu‚Äôen fin de transaction avec les risques que cela comporte.
Le traitement des tuples sur une base individuelle (for each row) n‚Äôam√©liorerait
que marginalement cet √©tat de fait. Pour terminer, dans certains cas, il ne
faudra pas √™tre surpris que les automatismes soit √©valu√©s de multiples
fois inutilement, puisque la plupart des SGBD ne font par la compression des
d√©clenchements!

Superf√©tatoire le CREATE ASSERTION ? Vraiment ?

En fait, pour ce type de situation, il convient g√©n√©ralement mieux de fournir
un jeu complet (mais exclusif) de proc√©dures sp√©cialis√©es encapsulant
compl√®tement la gestion des entit√©s comportant des attributs dont la valeur
peut ne pas √™tre connue. Par exemple, pour les entit√©s Professeur :

  procedure Engager_prof (nom, bureau, cause -> matricule) ;
  proc√©dure Modifier_nom_prof (matricule, nom) ;
  procedure Attribuer_bureau_prof (matricule, bureau) ;
  procedure Retirer_bureau_prof (matricule, cause) ;
  procedure Desengager_prof (matricule) ;

Finalement, des fonctions sont en g√©n√©ral ajout√©es selon le domaine d‚Äôapplication.
*/

create table Cours
(
  sigle Sigle not null,
  titre Titre not null,
  credit CDC not null,
  --  df sigle -> titre
  --  df sigle -> cr√©dit
  constraint Cours_cc0 primary key (sigle)
) ;
comment on table Cours is
  'Le cours identifi√© par le sigle "sigle" est d√©fini dans le r√©pertoire des cours offerts par l‚ÄôUniversit√©. '
  'Il a pour titre "titre". '
  'Il comporte "credit" cr√©dit(s). '
;

create table Groupe
(
  sigle Sigle not null,
  trimestre Trimestre not null,
  noGroupe NoGroupe not null,
  constraint Groupe_cc0 primary key (sigle, trimestre, noGroupe),
  constraint Groupe_cr0 foreign key (sigle) references Cours
) ;
comment on table Groupe is
  'Le groupe identifi√© par le sigle "sigle", le num√©ro "noGroupe" et le trimestre "trimestre" est constitu√©. '
;

create table Affectation
  -- Correspond √† l‚Äôoffre effective.
(
  sigle Sigle,
  trimestre Trimestre not null,
  noGroupe NoGroupe not null,
  matriculeP MatriculeP not null,
  -- Pour permettre √† un groupe de professeur d‚Äôassurer la formation, il faudrait
  -- ajouter matriculeP √† la cl√© candidate.
  constraint Affectation_cc0 primary key (sigle, trimestre, noGroupe),
  constraint Affectation_cr0 foreign key (sigle, trimestre, noGroupe) references Groupe,
  constraint Affectation_cr1 foreign key (matriculeP) references Professeur
) ;
comment on table Affectation is
  'La personne enseignante identifi√©e par "matriculeP" assure la formation du '
  'groupe identifi√© par les  sigle "sigle", le num√©ro "noGroupe" et le trimestre "trimestre". '
;

create table Inscription
(
  matriculeE MatriculeE not null,
  sigle Sigle not null,
  trimestre Trimestre not null,
  noGroupe NoGroupe not null,
  constraint Inscription_cc0 primary key (matriculeE, sigle, trimestre, noGroupe),
  constraint Inscription_cr0 foreign key (sigle, trimestre, noGroupe) references Groupe
) ;
comment on table Inscription is
  'La personne √©tudiante identifi√©e par "matriculeE" est inscrite au '
  'groupe identifi√© par le sigle "sigle", le num√©ro "noGroupe" et le trimestre "trimestre". '
;

create table Evaluation
(
  matriculeE MatriculeE not null,
  sigle Sigle not null,
  trimestre Trimestre not null,
  noGroupe NoGroupe not null,
  note Note not null,
  --  df sigle, trimestre, noGroupe, matriculeE -> note
  constraint Evaluation_cc0 primary key (matriculeE, sigle, trimestre, noGroupe),
  constraint Evaluation_cr0 foreign key (sigle, trimestre, noGroupe, matriculeE) references Inscription
) ;
comment on table Evaluation is
  'La personne √©tudiante identifi√©e par "matriculeE" inscrite au '
  'groupe identifi√© par sigle "sigle", le num√©ro "noGroupe" et le trimestre "trimestre" '
  'a obtenu la note "note". '
;

create table Prealable
(
  sigle Sigle not null,
  siglePrealable Sigle not null,
  constraint Prealable_cc0 primary key (sigle, siglePrealable),
  constraint Prealable_cr0 foreign key (sigle) references Cours,
  constraint Prealable_cr1 foreign key (siglePrealable) references Cours (sigle)
) ;
comment on table Prealable is
  'L‚Äôinscription au cours "sigle" n‚Äôest autoris√©e qu‚Äôaux personnes '
  'qui auront r√©ussi le cours "siglePr√©alable" avant le d√©but du cours "sigle". '
;

create table Offre
  -- Correspond √† l‚Äôoffre planifi√©e.
(
  sigle Sigle not null,
  trimestre Trimestre not null,
  constraint Offre_cc0 primary key (sigle, trimestre),
  constraint Offre_cr0 foreign key (sigle) references Cours
) ;
comment on table Offre is
  'l‚ÄôUniversit√© s‚Äôengage √† offrir le cours "sigle" au trimestre "trimestre". '
;

create table Competence
(
  sigle Sigle not null,
  matriculeP MatriculeP not null,
  constraint Competence_cc0 primary key (sigle, matriculeP),
  constraint Competence_cr0 foreign key (sigle) references Cours,
  constraint Competence_cr1 foreign key (matriculeP) references Professeur
) ;
comment on table Competence is
  'La personne enseignante identifi√©e par "matriculeP" a la comp√©tence requise '
  'pour assure le cours identifi√© par le sigle "sigle". '
;

create table Disponibilite
(
  trimestre Trimestre,
  matriculeP MatriculeP,
  constraint Disponibilite_cc0 primary key (trimestre, matriculeP),
  constraint Disponibilite_cr0 foreign key (trimestre) references Cours,
  constraint Disponibilite_cr1 foreign key (matriculeP) references Professeur
) ;
comment on table Disponibilite is
  'La personne enseignante identifi√©e par "matriculeP" est disponible '
  'pour enseigner au cours du trimestre "trimestre". '
;

/*
inv Affectation_comp
  pred ¬´ Affectation est conforme √† Comp√©tence. ¬ª
  Affectation ùûπ {sigle, matriculeP} ‚äÜ Comp√©tence

TODO 2021-03-19 : √Ä rendre plus efficient.
  La mise en oeuvre qui suit, bien qu‚Äôexacte, n‚Äôest g√©n√©ralement pas tr√®s performante
  faute d‚Äôoptimisation ad√©quate du compilateur. L‚Äô√©laboration d‚Äôune version plus
  performante est laiss√©e en exercice.
*/
create or replace function Affectation_comp_DECL()
  returns trigger
  language 'plpgsql' as
$$
begin
  if
    exists (select sigle, matriculeP from Affectation except select sigle, matriculeP from Competence)
  then
    raise exception
      'Affectation_comp_DECL : '
      'Affectation non conforme √† la comp√©tence. ' ;
  end if;
  return new;
end;
$$;

create /* constraint */ trigger Affectation_comp_AUTO
  after insert
     or delete
     or update
  on Affectation
  for each statement
  execute function Affectation_comp_DECL();

create /* constraint */ trigger Competence_aff_AUTO
  after insert
     or delete
     or update
  on Competence
  for each statement
  execute function Affectation_comp_DECL();

/*
inv Affectation_disp
  pred ¬´ Affectation est conforme √† Disponibilit√©. ¬ª
  Affectation ùûπ {trimestre, matriculeP} ‚äÜ Disponibilit√©

√Ä faire sur le mod√®le pr√©c√©dent.
*/

create or replace function Offre_plan_non_couverte ()
  returns table
    (
      sigle Sigle,
      trimestre Trimestre
    )
  language sql as
$$
  select sigle, trimestre from Offre
  except
  select distinct sigle, trimestre from Affectation
$$;
comment on function Offre_plan_non_couverte () is
  'D√©termine les cours de l‚Äôoffre (planifi√©e) non couverts par l‚Äôaffection (offre effective).'
;

create or replace function Offre_eff_conforme () returns boolean
  language sql as
$$
  select not exists(select * from Offre_plan_non_couverte())
$$;
comment on function Offre_eff_conforme () is
  'D√©termine si l‚Äôaffection (offre effective) est conforme √† l‚Äôoffre (planifi√©e).'
;

/*
-- =========================================================================== Y
== Question

1. Que penser de l‚Äôouverture de la cause d‚Äôabsence ? Un inventaire ferm√© des
   causes ne serait-il pas pr√©f√©rable ?
2. Que penser de la d√©finition de Sigle en regard de la d√©pendance fonctionnelle
   entre la discipline et le d√©partement introduite en cours pour l‚Äôexemple de
   FNBC ?
3. Le trimestre n‚Äôest-il pas un exemple d‚Äôentorse √† la 1FN ?
-- =========================================================================== Y
*/

/*
-- =========================================================================== Z
== Contributeurs
  (CK01) Christina.KHNAISSER@USherbrooke.ca,
  (LL01) Luc.LAVOIE@USherbrooke.ca

== Adresse, droits d‚Äôauteur et copyright
  Groupe Œú·øÜœÑŒπœÇ (M√©tis)
  D√©partement d‚Äôinformatique
  Facult√© des sciences
  Universit√© de Sherbrooke
  Sherbrooke (Qu√©bec)  J1K 2R1
  Canada
  http://info.usherbrooke.ca/llavoie/
  [CC-BY-NC-4.0 (http://creativecommons.org/licenses/by-nc/4.0)]

== T√¢ches projet√©es
TODO 2021-03-02 (LL01) : R√©aliser les √©tapes subs√©quentes
  * e04 : affinement des types Cause (d‚Äôabsence), Sigle (de cours)  et Trimestre
    ** Illustration des tables de code.
    ** Illustration des dangers des attributs composites, en particulier en regard des cl√©s.
  * e05 : affinement du concept de trimestre.
    ** Illustration de l‚Äôexplicitation des attributs afin d‚Äô√©viter les ¬´ constantes cach√©es ¬ª.
  * e06 : division en sch√©mas.
    ** Gestion de la complexit√© et du couplage par la visibilit√©.
    ** Gestion de l‚Äôint√©grit√© et de la s√©curit√© par le contr√¥le d‚Äôacc√®s.

== T√¢ches r√©alis√©es
2021-03-02 (LL01) : R√©alisation de l‚Äô√©tape 03
  * D√©finition des types √† partir du dictionnaire de donn√©es.
    ** Illustration du bon usage des contraintes de type.
2021-02-25 (LL01) : R√©alisation de l‚Äô√©tape 02
  * Traitement explicite de l‚Äôoffre de cours (programm√©e et effective).
    ** Illustration du traitement de la 5FN.
2021-02-23 (LL01) : R√©alisation de l‚Äô√©tape e01.
  * Prise en compte de l‚Äôabsence potentielle de certaines valeurs.
    ** Illustration du traitement de l‚Äôannulabilit√© :
       *** cas non applicable (note lors de l‚Äôinscription) ;
       *** cas non disponible (bureau du professeur) ;
       *** par DPJ ;
       *** par DRU.
2021-02-18 (LL01) : R√©alisation de l‚Äô√©tape e00.
  * Prise en compte des entit√©s de base √âtudiant, Professeur, Cours, Groupe...
    ** Illustration de la construction par entit√© et d√©pendances fonctionnelles.
2021-02-15 (LL01) : Cr√©ation initiale inspir√©e de l‚Äôexemple d√©velopp√© en 2014.

== R√©f√©rences
[ddv] http://info.usherbrooke.ca/llavoie/enseignement/Exemples/Universite/
      Universite_DDV.pdf
[std] http://info.usherbrooke.ca/llavoie/enseignement/Modules/
      BD190-STD-SQL-01_NDC.pdf
-- =========================================================================== Z
*/
